#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>

std::mutex mtx;
std::condition_variable cv;
bool countUpFinished = false;

void countUp() {
    std::thread::id this_id = std::this_thread::get_id();
    for (int i = 0; i <= 20; ++i) {
        std::cout << "Count Up [Thread " << this_id << "]: " << i << std::endl;
    }

    std::lock_guard<std::mutex> lock(mtx);
    countUpFinished = true;
    cv.notify_one();
}

void countDown() {
    std::unique_lock<std::mutex> lock(mtx);
    cv.wait(lock, [] { return countUpFinished; });

    std::thread::id this_id = std::this_thread::get_id();
    for (int i = 20; i >= 0; --i) {
        std::cout << "Count Down [Thread " << this_id << "]: " << i << std::endl;
    }
}

int main() {
    std::thread t1(countUp);
    std::thread t2(countDown);

    t1.join();
    t2.join();

    return 0;
}


//Detailed Analysis of Concurrency Code
In my program, I used two threads to count up and then down, using a mutex and condition variable to make sure they didn’t run at the same time. While this shows how concurrency works, it doesn't really speed things up since the second thread waits for the first. In more complex programs, using threads this way could help with performance, but only if the tasks can run in parallel without blocking each other. Poor synchronization can actually hurt performance due to extra waiting or context switching between threads, so it’s important to use concurrency only when it makes sense.
For this project, the use of strings was limited to printing thread labels to the console. Since each thread only prints and doesn’t modify shared data, it’s safe in this case. But I know that if I had both threads building or modifying the same string, it could cause a data race or crash without a mutex. The specific types that I used such as integers and strings are relatively secure on their own, but problems can still happen if they’re shared between threads without proper locking. Keeping the logic simple and well-controlled made it easy to avoid common vulnerabilities like race conditions or deadlocks in this example.
